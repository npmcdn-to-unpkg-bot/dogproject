{
    "swagger": "2.0",
    "info": {
        "title": "Petagree API",
        "description": "Api",
        "termsOfService": "",
        "contact": {
            "email": "contact@mysite.com"
        },
        "license": {
            "name": "Private License",
            "url": "URL to the license"
        },
        "version": "1.0.0"
    },
    "host": "api.petagree/api",
    "schemes": [
        "http",
        "https"
    ],
    "paths": {
        "/association": {
            "put": {
                "tags": [
                    "Association"
                ],
                "description": "Edit all association information",
                "operationId": "putAssociation",
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Name of the association.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "suburb_id",
                        "in": "query",
                        "description": "Location of the association.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "state_id",
                        "in": "query",
                        "description": "Location of the association.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "breed",
                        "in": "query",
                        "description": "Dog breed of the association.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "about",
                        "in": "query",
                        "description": "General information of the association.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/editAssociation"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity."
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired.<br>-----------------------------------------------------------------------<br>The token has been blacklisted<br>-----------------------------------------------------------------------Unable to authenticate with invalid token.<br>------------------------------------<br>Only association profiles can access this resource."
                    }
                }
            },
            "post": {
                "tags": [
                    "Association"
                ],
                "description": "Request creation of new association",
                "operationId": "postAssociation",
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Name of the association.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "first_name",
                        "in": "query",
                        "description": "First name of the key representative (profile owner).",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "last_name",
                        "in": "query",
                        "description": "Last name of the key representative (profile owner).",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "Email of the association",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "contact_number",
                        "in": "query",
                        "description": "Telephone number for contact.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "suburb_id",
                        "in": "query",
                        "description": "Location of the association.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "state_id",
                        "in": "query",
                        "description": "Location of the association.",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "201": {
                        "description": ""
                    },
                    "422": {
                        "description": "Unprocessable entity."
                    }
                }
            },
            "patch": {
                "tags": [
                    "Association"
                ],
                "description": "Edit some of the association information",
                "operationId": "patchAssociation",
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Name of the association.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "suburb_id",
                        "in": "query",
                        "description": "Location of the association.",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "state_id",
                        "in": "query",
                        "description": "Location of the association.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "breed",
                        "in": "query",
                        "description": "Dog breed of the association.",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "about",
                        "in": "query",
                        "description": "General information of the association.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/editAssociation"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity."
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired.<br>-----------------------------------------------------------------------<br>The token has been blacklisted<br>-----------------------------------------------------------------------Unable to authenticate with invalid token.<br>------------------------------------<br>Only association profiles can access this resource."
                    }
                }
            }
        },
        "/association/slug/{slug}": {
            "get": {
                "tags": [
                    "Association"
                ],
                "description": "Get association members.",
                "operationId": "getAssociationMembers",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "description": "slug",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/slugAssociation"
                        }
                    },
                    "404": {
                        "description": "Slug not found."
                    }
                }
            }
        },
        "/association/enquiry": {
            "post": {
                "tags": [
                    "Association"
                ],
                "description": "Creates new enquiry for seller",
                "operationId": "postSellerEnquiry",
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Name of the user.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "Email of the user.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "enquiry",
                        "in": "query",
                        "description": "Enquiry of the user.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "422": {
                        "description": "Unprocessable entity"
                    },
                    "403": {
                        "description": "You have exceeded your rate limit."
                    }
                }
            }
        },
        "/association/members": {
            "post": {
                "tags": [
                    "Association"
                ],
                "description": "Add association members.",
                "operationId": "postAssociationMembers",
                "parameters": [
                    {
                        "name": "suburb_id",
                        "in": "query",
                        "description": "State where member lives.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "state_id",
                        "in": "query",
                        "description": "Location of the association.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "member_email",
                        "in": "query",
                        "description": "Mail of the breeder (new member).",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "422": {
                        "description": "Unprocessable Entity."
                    },
                    "403": {
                        "description": "Invite is allready sent to this user!"
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired.<br>-----------------------------------------------------------------------<br>The token has been blacklisted<br>-----------------------------------------------------------------------Unable to authenticate with invalid token.<br>------------------------------------<br>Only association profiles can access this resource."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Association"
                ],
                "description": "Delete association members.",
                "operationId": "deleteAssociationMembers",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Delete member with given ID.",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "404": {
                        "description": "User not found"
                    },
                    "422": {
                        "description": "Unprocessable Entity."
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired.<br>-----------------------------------------------------------------------<br>The token has been blacklisted<br>-----------------------------------------------------------------------Unable to authenticate with invalid token.<br>------------------------------------<br>Only association profiles can access this resource."
                    }
                }
            }
        },
        "/association/with": {
            "get": {
                "tags": [
                    "Association"
                ],
                "description": "Get association relations that are manually specified.",
                "operationId": "getAssociationWith",
                "parameters": [
                    {
                        "name": "relations",
                        "in": "query",
                        "description": "Names of relations that user wants to get information from. Relations avaliable : users,breed,suburb,state,key_members,members",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/associationWith"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity."
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired.<br>-----------------------------------------------------------------------<br>The token has been blacklisted<br>-----------------------------------------------------------------------Unable to authenticate with invalid token.<br>------------------------------------<br>Only association profiles can access this resource."
                    }
                }
            }
        },
        "/association/images": {
            "post": {
                "tags": [
                    "Association"
                ],
                "description": "Post association images.",
                "operationId": "postAssociationImages",
                "parameters": [
                    {
                        "name": "avatar",
                        "in": "query",
                        "description": "Avatar of the association.",
                        "required": true,
                        "type": "file"
                    },
                    {
                        "name": "images",
                        "in": "query",
                        "description": "Images of the association.",
                        "required": true,
                        "type": "array",
                        "items": "file"
                    },
                    {
                        "name": "banner_image",
                        "in": "query",
                        "description": "Banner image of the association.",
                        "required": true,
                        "type": "file"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Size of images is too big"
                    },
                    "422": {
                        "description": "Unprocessable Entity."
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired.<br>-----------------------------------------------------------------------<br>The token has been blacklisted<br>-----------------------------------------------------------------------Unable to authenticate with invalid token.<br>------------------------------------<br>Only association profiles can access this resource."
                    }
                }
            }
        },
        "/association/keymembers": {
            "post": {
                "tags": [
                    "Association"
                ],
                "description": "Post association keymembers.",
                "operationId": "postAssociationKeymembers",
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Type of key member.",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Name of key member.",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "Email of keymember.",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Not all data is provided."
                    },
                    "422": {
                        "description": "Unprocessable Entity."
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired.<br>-----------------------------------------------------------------------<br>The token has been blacklisted<br>-----------------------------------------------------------------------Unable to authenticate with invalid token.<br>------------------------------------<br>Only association profiles can access this resource."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Association"
                ],
                "description": "Delete association keymembers.",
                "operationId": "deleteAssociationKeymembers",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Id of key member.",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "422": {
                        "description": "Unprocessable Entity."
                    },
                    "400": {
                        "description": "Keymember belongs to other association"
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired.<br>-----------------------------------------------------------------------<br>The token has been blacklisted<br>-----------------------------------------------------------------------Unable to authenticate with invalid token.<br>------------------------------------<br>Only association profiles can access this resource."
                    }
                }
            }
        },
        "/auth/user": {
            "get": {
                "tags": [
                    "Auth"
                ],
                "description": "Get user information from token.",
                "operationId": "getAuthUser",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/userId"
                        }
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired.<br>-----------------------------------------------------------------------<br>The token has been blacklisted<br>-----------------------------------------------------------------------Unable to authenticate with invalid token.<br>"
                    }
                }
            },
            "post": {
                "tags": [
                    "Auth"
                ],
                "description": "Register user.",
                "operationId": "postAuthUser",
                "parameters": [
                    {
                        "name": "first_name",
                        "in": "query",
                        "description": "First name of the user.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "last_name",
                        "in": "query",
                        "description": "Last name of the user.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "Email of the user.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "password",
                        "in": "query",
                        "description": "Password",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "contact_number",
                        "in": "query",
                        "description": "Phone number of the user.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "role",
                        "in": "query",
                        "description": "Role of the user.",
                        "required": true,
                        "type": "integer",
                        "enum": "13"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/token"
                        }
                    },
                    "500": {
                        "description": "Internal error."
                    },
                    "422": {
                        "description": "Unprocessable Entity."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Auth"
                ],
                "description": "Deletes user based on token.",
                "operationId": "deleteAuthUser",
                "responses": {
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired.<br>-----------------------------------------------------------------------<br>The token has been blacklisted<br>-----------------------------------------------------------------------Unable to authenticate with invalid token.<br>"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Auth"
                ],
                "description": "Updates user based on token.",
                "operationId": "getUpdate",
                "parameters": [
                    {
                        "name": "first_name",
                        "in": "query",
                        "description": "First name of the user.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "last_name",
                        "in": "query",
                        "description": "Last name of the user.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "Email of the user.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "contact_number",
                        "in": "query",
                        "description": "Phone number of the user.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/userId"
                        }
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired.<br>-----------------------------------------------------------------------<br>The token has been blacklisted<br>-----------------------------------------------------------------------Unable to authenticate with invalid token.<br>"
                    }
                }
            }
        },
        "/auth/user/password": {
            "patch": {
                "tags": [
                    "Auth"
                ],
                "description": "Method for changing password",
                "operationId": "patchAuthUserPassword",
                "parameters": [
                    {
                        "name": "password",
                        "in": "query",
                        "description": "New password",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "password_confirmation",
                        "in": "query",
                        "description": "Confirm new password.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/userId"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity."
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired.<br>-----------------------------------------------------------------------<br>The token has been blacklisted<br>-----------------------------------------------------------------------Unable to authenticate with invalid token.<br>"
                    }
                }
            }
        },
        "/auth/token": {
            "get": {
                "tags": [
                    "Auth"
                ],
                "description": "Log in and get the token.",
                "operationId": "getAuthToken",
                "parameters": [
                    {
                        "name": "email",
                        "in": "query",
                        "description": "Email of user that needs to be authenticated.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "password",
                        "in": "query",
                        "description": "Password of user that needs to be authenticated.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/token"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity."
                    },
                    "401": {
                        "description": "Incorrect email / password combination.<br>--------------------------------------<br>Inactive user.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResult"
                        }
                    }
                }
            }
        },
        "/auth/token/refresh": {
            "get": {
                "tags": [
                    "Auth"
                ],
                "description": "Get refreshed token from expired token",
                "operationId": "getAuthTokenRefresh",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/newToken"
                        }
                    },
                    "498": {
                        "description": "Token has expired",
                        "schema": {
                            "$ref": "#/definitions/ErrorResult"
                        }
                    },
                    "401": {
                        "description": "Token invalid",
                        "schema": {
                            "$ref": "#/definitions/ErrorResult"
                        }
                    }
                }
            }
        },
        "/auth/token/destroy": {
            "get": {
                "tags": [
                    "Auth"
                ],
                "description": "Logs out user based on token.",
                "operationId": "getAuthTokenDestroy",
                "responses": {
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired.<br>-----------------------------------------------------------------------<br>The token has been blacklisted<br>-----------------------------------------------------------------------Unable to authenticate with invalid token.<br>"
                    }
                }
            }
        },
        "/auth/token/blacklist": {
            "get": {
                "tags": [
                    "Auth"
                ],
                "description": "Logs out user based and blacklists their token.",
                "operationId": "getAuthTokenBlacklist",
                "responses": {
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired.<br>-----------------------------------------------------------------------<br>The token has been blacklisted<br>-----------------------------------------------------------------------Unable to authenticate with invalid token.<br>"
                    }
                }
            }
        },
        "/auth/user/reset/password": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "description": "Gets password reset token on mail.",
                "operationId": "postResetToken",
                "parameters": [
                    {
                        "name": "email",
                        "in": "query",
                        "description": "Email of user to send reset password token to.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "We have e-mailed your password reset link!"
                    },
                    "422": {
                        "description": "Unprocessable Entity."
                    },
                    "401": {
                        "description": "We can't find a user with that e-mail address."
                    }
                }
            },
            "patch": {
                "tags": [
                    "Auth"
                ],
                "description": "Resets password.",
                "operationId": "patchAuthUserResetPassword",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "Token for reseting password.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "password",
                        "in": "query",
                        "description": "New password.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "password_confirmation",
                        "in": "query",
                        "description": "New password.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Your password has been reset!"
                    },
                    "422": {
                        "description": "Unprocessable Entity."
                    },
                    "400": {
                        "description": "This password reset token is invalid."
                    }
                }
            }
        },
        "/auth/token/validate": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "description": "Validates reset password token.",
                "operationId": "postAuthTokenValidate",
                "parameters": [
                    {
                        "name": "reset_token",
                        "in": "query",
                        "description": "Token for reseting password.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "202": {
                        "description": ""
                    },
                    "422": {
                        "description": "Unprocessable Entity."
                    },
                    "403": {
                        "description": "Token does not exists."
                    },
                    "400": {
                        "description": "Your password reset token has expired."
                    }
                }
            }
        },
        "/dog": {
            "put": {
                "tags": [
                    "Dog"
                ],
                "description": "Update whole dog information",
                "operationId": "putDog",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Id of dog that needs update.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "breed_id",
                        "in": "query",
                        "description": "Id of dog breed.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "birth_date",
                        "in": "query",
                        "description": "Date when dog was born.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "type_of_listing",
                        "in": "query",
                        "description": "Type of listing (single,mature, litter).",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "single",
                            "mature",
                            "litter"
                        ]
                    },
                    {
                        "name": "sex",
                        "in": "query",
                        "description": "M or f",
                        "required": false,
                        "type": "string",
                        "enum": "mf"
                    },
                    {
                        "name": "male_qty",
                        "in": "query",
                        "description": "Number of male dogs in litter",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "female_qty",
                        "in": "query",
                        "description": "Number of female dogs in litter",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "cost",
                        "in": "query",
                        "description": "Price of dog.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "about",
                        "in": "query",
                        "description": "Information about dog.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "mother_id",
                        "in": "query",
                        "description": "Id of dog mother.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "father_id",
                        "in": "query",
                        "description": "Id of dog father.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "vaccination",
                        "in": "query",
                        "description": "Is dog vaccinated.",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "vet_checked",
                        "in": "query",
                        "description": "Is dog vet checked.",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "desexed",
                        "in": "query",
                        "description": "Is dog desexed.",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "de_warmed",
                        "in": "query",
                        "description": "Is dog de-warmed.",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "micro_chipped",
                        "in": "query",
                        "description": "Is dog micro chipped.",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "registration_papers",
                        "in": "query",
                        "description": "Does dog have registration papers.",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/editDog"
                        }
                    },
                    "400": {
                        "description": "Father dog does not belong to this seller.<br>------------------------------------------------<br>Mother dog does not belong to this seller.<br>-------------------------------------------<br>Wrong type of listing."
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only seller profiles can access this resource."
                    },
                    "422": {
                        "description": "Unprocessable entity."
                    }
                }
            },
            "post": {
                "tags": [
                    "Dog"
                ],
                "description": "Add new dog to listing",
                "operationId": "postDog",
                "parameters": [
                    {
                        "name": "breed_id",
                        "in": "query",
                        "description": "Id of dog breed.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "birth_date",
                        "in": "query",
                        "description": "Date when dog was born.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "type_of_listing",
                        "in": "query",
                        "description": "Type of listing (single,mature, litter).",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "single",
                            "mature",
                            "litter"
                        ]
                    },
                    {
                        "name": "sex",
                        "in": "query",
                        "description": "M or f",
                        "required": false,
                        "type": "string",
                        "enum": "mf"
                    },
                    {
                        "name": "male_qty",
                        "in": "query",
                        "description": "Number of male dogs in litter",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "female_qty",
                        "in": "query",
                        "description": "Number of female dogs in litter",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "cost",
                        "in": "query",
                        "description": "Price of dog.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "about",
                        "in": "query",
                        "description": "Information about dog.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "mother_id",
                        "in": "query",
                        "description": "Id of dog mother.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "father_id",
                        "in": "query",
                        "description": "Id of dog father.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "vaccination",
                        "in": "query",
                        "description": "Is dog vaccinated.",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "vet_checked",
                        "in": "query",
                        "description": "Is dog vet checked.",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "desexed",
                        "in": "query",
                        "description": "Is dog desexed.",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "de_warmed",
                        "in": "query",
                        "description": "Is dog de-warmed.",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "micro_chipped",
                        "in": "query",
                        "description": "Is dog micro chipped.",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "registration_papers",
                        "in": "query",
                        "description": "Does dog have registration papers.",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Father dog does not belong to this seller.<br>------------------------------------------------<br>Mother dog does not belong to this seller."
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only seller profiles can access this resource."
                    },
                    "422": {
                        "description": "Unprocessable entity."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Dog"
                ],
                "description": "Delete dog.",
                "operationId": "deleteDog",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Id of dog that needs to be deleted.",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Dog belongs to other seller."
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only seller profiles can access this resource."
                    },
                    "422": {
                        "description": "Unprocessable entity."
                    }
                }
            },
            "patch": {
                "tags": [
                    "Dog"
                ],
                "description": "Update partial dog information",
                "operationId": "patchDog",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Id of dog that needs update.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "breed_id",
                        "in": "query",
                        "description": "Id of dog breed.",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "birth_date",
                        "in": "query",
                        "description": "Date when dog was born.",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "type_of_listing",
                        "in": "query",
                        "description": "Type of listing (single,mature, litter).",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "single",
                            "mature",
                            "litter"
                        ]
                    },
                    {
                        "name": "sex",
                        "in": "query",
                        "description": "M or f",
                        "required": false,
                        "type": "string",
                        "enum": "mf"
                    },
                    {
                        "name": "male_qty",
                        "in": "query",
                        "description": "Number of male dogs in litter",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "female_qty",
                        "in": "query",
                        "description": "Number of female dogs in litter",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "cost",
                        "in": "query",
                        "description": "Price of dog.",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "about",
                        "in": "query",
                        "description": "Information about dog.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "mother_id",
                        "in": "query",
                        "description": "Id of dog mother.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "father_id",
                        "in": "query",
                        "description": "Id of dog father.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "vaccination",
                        "in": "query",
                        "description": "Is dog vaccinated.",
                        "required": false,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "vet_checked",
                        "in": "query",
                        "description": "Is dog vet checked.",
                        "required": false,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "desexed",
                        "in": "query",
                        "description": "Is dog desexed.",
                        "required": false,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "de_warmed",
                        "in": "query",
                        "description": "Is dog de-warmed.",
                        "required": false,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "micro_chipped",
                        "in": "query",
                        "description": "Is dog micro chipped.",
                        "required": false,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "registration_papers",
                        "in": "query",
                        "description": "Does dog have registration papers.",
                        "required": false,
                        "type": "integer",
                        "enum": "10"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/editDog"
                        }
                    },
                    "400": {
                        "description": "Father dog does not belong to this seller.<br>------------------------------------------------<br>Mother dog does not belong to this seller.<br>-------------------------------------------<br>Wrong type of listing."
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only seller profiles can access this resource."
                    },
                    "422": {
                        "description": "Unprocessable entity."
                    }
                }
            }
        },
        "/dog/mother": {
            "get": {
                "tags": [
                    "Dog"
                ],
                "description": "Get all dogs mother for user",
                "operationId": "getDogMother",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/dogParentData"
                        }
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only seller profiles can access this resource."
                    }
                }
            },
            "post": {
                "tags": [
                    "Dog"
                ],
                "description": "Add dog mother",
                "operationId": "postDogMother",
                "parameters": [
                    {
                        "name": "breed_id",
                        "in": "query",
                        "description": "Id of dog breed.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Name of dog.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "birth_date",
                        "in": "query",
                        "description": "Date when dog was born.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "temperament",
                        "in": "query",
                        "description": "Temperament scale.",
                        "required": true,
                        "type": "integer",
                        "enum": "123"
                    },
                    {
                        "name": "energy",
                        "in": "query",
                        "description": "Energy scale.",
                        "required": true,
                        "type": "integer",
                        "enum": "123"
                    },
                    {
                        "name": "intelligence",
                        "in": "query",
                        "description": "Intelligence scale.",
                        "required": true,
                        "type": "integer",
                        "enum": "123"
                    },
                    {
                        "name": "maintenance",
                        "in": "query",
                        "description": "Maintenance scale.",
                        "required": true,
                        "type": "integer",
                        "enum": "123"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/dogMotherId"
                        }
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only seller profiles can access this resource."
                    },
                    "422": {
                        "description": "Unprocessable entity."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Dog"
                ],
                "description": "Delete dog mother",
                "operationId": "deleteDogMother",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Id of dog mother to delete.",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Dog mother does not belong to this seller."
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only seller profiles can access this resource."
                    },
                    "422": {
                        "description": "Unprocessable entity."
                    }
                }
            }
        },
        "/dog/mother/image": {
            "post": {
                "tags": [
                    "Dog"
                ],
                "description": "Add dog mother image",
                "operationId": "postDogMotherImage",
                "parameters": [
                    {
                        "name": "image",
                        "in": "query",
                        "description": "Image of dog mother",
                        "required": true,
                        "type": "file"
                    },
                    {
                        "name": "mother_id",
                        "in": "query",
                        "description": "Id of dog mother",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Mother dog belongs to other seller."
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only seller profiles can access this resource."
                    },
                    "422": {
                        "description": "Unprocessable entity."
                    }
                }
            }
        },
        "/dog/father": {
            "get": {
                "tags": [
                    "Dog"
                ],
                "description": "Get all dogs father for user",
                "operationId": "getDogFather",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/dogParentData"
                        }
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only seller profiles can access this resource."
                    }
                }
            },
            "post": {
                "tags": [
                    "Dog"
                ],
                "description": "Add dog father",
                "operationId": "postDogFather",
                "parameters": [
                    {
                        "name": "breed_id",
                        "in": "query",
                        "description": "Id of dog breed.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Name of dog.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "birth_date",
                        "in": "query",
                        "description": "Date when dog was born.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "temperament",
                        "in": "query",
                        "description": "Temperament scale.",
                        "required": true,
                        "type": "integer",
                        "enum": "123"
                    },
                    {
                        "name": "energy",
                        "in": "query",
                        "description": "Energy scale.",
                        "required": true,
                        "type": "integer",
                        "enum": "123"
                    },
                    {
                        "name": "intelligence",
                        "in": "query",
                        "description": "Intelligence scale.",
                        "required": true,
                        "type": "integer",
                        "enum": "123"
                    },
                    {
                        "name": "maintenance",
                        "in": "query",
                        "description": "Maintenance scale.",
                        "required": true,
                        "type": "integer",
                        "enum": "123"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/dogFatherId"
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity."
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only seller profiles can access this resource."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Dog"
                ],
                "description": "Delete dog father",
                "operationId": "deleteDogFather",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Id of dog father to delete.",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Dog father does not belong to this seller."
                    },
                    "422": {
                        "description": "Unprocessable entity."
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only seller profiles can access this resource."
                    }
                }
            }
        },
        "/dog/father/image": {
            "post": {
                "tags": [
                    "Dog"
                ],
                "description": "Add dog father image",
                "operationId": "postDogFatherImage",
                "parameters": [
                    {
                        "name": "image",
                        "in": "query",
                        "description": "Image of dog mother",
                        "required": true,
                        "type": "file"
                    },
                    {
                        "name": "father_id",
                        "in": "query",
                        "description": "Id of dog father",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Father dog belongs to other seller."
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only seller profiles can access this resource."
                    },
                    "422": {
                        "description": "Unprocessable entity."
                    }
                }
            }
        },
        "/dog/images": {
            "post": {
                "tags": [
                    "Dog"
                ],
                "description": "Post dog images",
                "operationId": "postDogImages",
                "parameters": [
                    {
                        "name": "dog_id",
                        "in": "query",
                        "description": "Id of dog whose pictures are uploading.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "images",
                        "in": "query",
                        "description": "Images of the dog.",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "422": {
                        "description": "Unprocessable entity."
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only seller profiles can access this resource."
                    }
                }
            }
        },
        "/dog/rescue": {
            "put": {
                "tags": [
                    "Dog"
                ],
                "description": "Edit whole rescue dog resource",
                "operationId": "putDogRescue",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Id of rescue dog.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "breed_id",
                        "in": "query",
                        "description": "Id of dog breed.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Name of rescue dog.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "birth_date",
                        "in": "query",
                        "description": "Date when dog was born.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "sex",
                        "in": "query",
                        "description": "M or f",
                        "required": true,
                        "type": "string",
                        "enum": "mf"
                    },
                    {
                        "name": "cost",
                        "in": "query",
                        "description": "Price of dog.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "about",
                        "in": "query",
                        "description": "Information about dog.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "vaccination",
                        "in": "query",
                        "description": "Is dog vaccinated.",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "vet_checked",
                        "in": "query",
                        "description": "Is dog vet checked.",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "desexed",
                        "in": "query",
                        "description": "Is dog desexed.",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "de_warmed",
                        "in": "query",
                        "description": "Is dog de-warmed.",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "micro_chipped",
                        "in": "query",
                        "description": "Is dog micro chipped.",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "registration_papers",
                        "in": "query",
                        "description": "Does dog have registration papers.",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "family_dog",
                        "in": "query",
                        "description": "Is rescue dog family dog",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "indoor_dog",
                        "in": "query",
                        "description": "Is rescue dog indoor dog",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "energetic",
                        "in": "query",
                        "description": "Is rescue dog energetic dog",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "friendly",
                        "in": "query",
                        "description": "Is rescue dog friendly dog",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "outdoor_dog",
                        "in": "query",
                        "description": "Is rescue dog outdoor dog",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "relaxed",
                        "in": "query",
                        "description": "Is rescue dog relaxed dog",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Dog belongs to other shelter."
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only shelter profiles can access this resource."
                    },
                    "422": {
                        "description": "Unprocessable entity."
                    }
                }
            },
            "post": {
                "tags": [
                    "Dog"
                ],
                "description": "Add new rescue dog to listing",
                "operationId": "postDogRescue",
                "parameters": [
                    {
                        "name": "breed_id",
                        "in": "query",
                        "description": "Id of dog breed.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Name of rescue dog.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "birth_date",
                        "in": "query",
                        "description": "Date when dog was born.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "sex",
                        "in": "query",
                        "description": "M or f",
                        "required": true,
                        "type": "string",
                        "enum": "mf"
                    },
                    {
                        "name": "cost",
                        "in": "query",
                        "description": "Price of dog.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "about",
                        "in": "query",
                        "description": "Information about dog.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "vaccination",
                        "in": "query",
                        "description": "Is dog vaccinated.",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "vet_checked",
                        "in": "query",
                        "description": "Is dog vet checked.",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "desexed",
                        "in": "query",
                        "description": "Is dog desexed.",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "de_warmed",
                        "in": "query",
                        "description": "Is dog de-warmed.",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "micro_chipped",
                        "in": "query",
                        "description": "Is dog micro chipped.",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "registration_papers",
                        "in": "query",
                        "description": "Does dog have registration papers.",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "family_dog",
                        "in": "query",
                        "description": "Is rescue dog family dog",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "indoor_dog",
                        "in": "query",
                        "description": "Is rescue dog indoor dog",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "energetic",
                        "in": "query",
                        "description": "Is rescue dog energetic dog",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "friendly",
                        "in": "query",
                        "description": "Is rescue dog friendly dog",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "outdoor_dog",
                        "in": "query",
                        "description": "Is rescue dog outdoor dog",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "relaxed",
                        "in": "query",
                        "description": "Is rescue dog relaxed dog",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    }
                ],
                "responses": {
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only shelter profiles can access this resource."
                    },
                    "422": {
                        "description": "Unprocessable entity."
                    },
                    "403": {
                        "description": "You have exceeded your rate limit."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Dog"
                ],
                "description": "Delete dog rescue.",
                "operationId": "deleteDogRescue",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Id of dog rescue that needs to be deleted.",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Dog belongs to other shelter."
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only shelter profiles can access this resource."
                    },
                    "422": {
                        "description": "Unprocessable entity."
                    }
                }
            },
            "patch": {
                "tags": [
                    "Dog"
                ],
                "description": "Edit partial rescue dog resource",
                "operationId": "patchDogRescue",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Id of rescue dog.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "breed_id",
                        "in": "query",
                        "description": "Id of dog breed.",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Name of rescue dog.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "birth_date",
                        "in": "query",
                        "description": "Date when dog was born.",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "sex",
                        "in": "query",
                        "description": "M or f",
                        "required": false,
                        "type": "string",
                        "enum": "mf"
                    },
                    {
                        "name": "cost",
                        "in": "query",
                        "description": "Price of dog.",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "about",
                        "in": "query",
                        "description": "Information about dog.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "vaccination",
                        "in": "query",
                        "description": "Is dog vaccinated.",
                        "required": false,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "vet_checked",
                        "in": "query",
                        "description": "Is dog vet checked.",
                        "required": false,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "desexed",
                        "in": "query",
                        "description": "Is dog desexed.",
                        "required": false,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "de_warmed",
                        "in": "query",
                        "description": "Is dog de-warmed.",
                        "required": false,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "micro_chipped",
                        "in": "query",
                        "description": "Is dog micro chipped.",
                        "required": false,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "registration_papers",
                        "in": "query",
                        "description": "Does dog have registration papers.",
                        "required": false,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "family_dog",
                        "in": "query",
                        "description": "Is rescue dog family dog",
                        "required": false,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "indoor_dog",
                        "in": "query",
                        "description": "Is rescue dog indoor dog",
                        "required": false,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "energetic",
                        "in": "query",
                        "description": "Is rescue dog energetic dog",
                        "required": false,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "friendly",
                        "in": "query",
                        "description": "Is rescue dog friendly dog",
                        "required": false,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "outdoor_dog",
                        "in": "query",
                        "description": "Is rescue dog outdoor dog",
                        "required": false,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "relaxed",
                        "in": "query",
                        "description": "Is rescue dog relaxed dog",
                        "required": false,
                        "type": "integer",
                        "enum": "10"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Dog belongs to other shelter."
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only shelter profiles can access this resource."
                    },
                    "422": {
                        "description": "Unprocessable entity."
                    }
                }
            }
        },
        "/dog/rescue/images": {
            "post": {
                "tags": [
                    "Dog"
                ],
                "description": "Post dog rescue images",
                "operationId": "postDogRescueImages",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Id of dog whose pictures are uploading.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "images",
                        "in": "query",
                        "description": "Images of the dog.",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "422": {
                        "description": "Unprocessable entity."
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only seller profiles can access this resource."
                    }
                }
            }
        },
        "/dog/with": {
            "get": {
                "tags": [
                    "Dog"
                ],
                "description": "Returns all dog info and related information",
                "operationId": "getDogWith",
                "parameters": [
                    {
                        "name": "relations",
                        "in": "query",
                        "description": "Names of relations that user wants to get information from. Relations avaliable : owner,mother,father,breed,shelter",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/dogWith"
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity"
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only seller profiles can access this resource."
                    }
                }
            }
        },
        "/dog/{id}": {
            "get": {
                "tags": [
                    "Dog"
                ],
                "description": "Returns single dog info",
                "operationId": "getDogId",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of dog",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/editDog"
                        }
                    },
                    "404": {
                        "description": "Dog not found"
                    }
                }
            }
        },
        "/dog/{id}/with": {
            "get": {
                "tags": [
                    "Dog"
                ],
                "description": "Returns single dog info and related information",
                "operationId": "getDogIdWith",
                "parameters": [
                    {
                        "name": "relations",
                        "in": "query",
                        "description": "Names of relations that user wants to get information from. Relations avaliable : owner,mother,father,breed,shelter",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/dogWith"
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity"
                    }
                }
            }
        },
        "/state": {
            "get": {
                "tags": [
                    "Location"
                ],
                "description": "Returns all states",
                "operationId": "getState",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/locationState"
                        }
                    }
                }
            }
        },
        "/suburb": {
            "get": {
                "tags": [
                    "Location"
                ],
                "description": "Returns all suburbs",
                "operationId": "getSuburb",
                "parameters": [
                    {
                        "name": "state_id",
                        "in": "query",
                        "description": "Id of state where suburb is.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/locationSuburb"
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity"
                    }
                }
            }
        },
        "/other/enquiry": {
            "post": {
                "tags": [
                    "Other"
                ],
                "description": "Creates new enquiry for petagree",
                "operationId": "postOtherEnquiry",
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "User's name.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "Email of the user.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "contact_number",
                        "in": "query",
                        "description": "Telephone number of the user.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "contact_type",
                        "in": "query",
                        "description": "Contact type",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "enquiry",
                        "in": "query",
                        "description": "Users enquiry body.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "422": {
                        "description": "Unprocessable entity"
                    },
                    "403": {
                        "description": "You have exceeded your rate limit."
                    }
                }
            }
        },
        "/seller": {
            "get": {
                "tags": [
                    "Seller"
                ],
                "description": "Returns seller from token and related information",
                "operationId": "getSeller",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/sellerModel"
                        }
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only seller profiles can access this resource."
                    }
                }
            },
            "put": {
                "tags": [
                    "Seller"
                ],
                "description": "Updates seller, whole row.",
                "operationId": "putSeller",
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Type of seller.",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "hobby",
                            "verified"
                        ]
                    },
                    {
                        "name": "suburb_id",
                        "in": "query",
                        "description": "Location.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "state_id",
                        "in": "query",
                        "description": "Location.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "address",
                        "in": "query",
                        "description": "Address of the seller.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "description": "Language seller wants to use.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "find_out",
                        "in": "query",
                        "description": "How did seller found out this site.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "about",
                        "in": "query",
                        "description": "Some information about seller.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "newsletter",
                        "in": "query",
                        "description": "Does seller wants to receive newsletter",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "terms",
                        "in": "query",
                        "description": "Does seller agrees to our terms.",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "smartphone",
                        "in": "query",
                        "description": "Use smartphone for this account.",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/sellerModel"
                        }
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only seller profiles can access this resource."
                    },
                    "404": {
                        "description": "User not found."
                    },
                    "422": {
                        "description": "Unprocessable entity"
                    },
                    "500": {
                        "description": "Error internal."
                    }
                }
            },
            "post": {
                "tags": [
                    "Seller"
                ],
                "description": "Creates new seller",
                "operationId": "postSeller",
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Type of seller.",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "hobby",
                            "verified"
                        ]
                    },
                    {
                        "name": "suburb_id",
                        "in": "query",
                        "description": "Location.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "state_id",
                        "in": "query",
                        "description": "Location.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "address",
                        "in": "query",
                        "description": "Address of the seller.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "description": "Language seller wants to use.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "find_out",
                        "in": "query",
                        "description": "How did seller found out this site.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "about",
                        "in": "query",
                        "description": "Some information about seller.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "newsletter",
                        "in": "query",
                        "description": "Does seller wants to receive newsletter",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "terms",
                        "in": "query",
                        "description": "Does seller agrees to our terms.",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "smartphone",
                        "in": "query",
                        "description": "Use smartphone for this account.",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    }
                ],
                "responses": {
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired"
                    },
                    "404": {
                        "description": "User not found."
                    },
                    "403": {
                        "description": "Seller with that id already exists."
                    },
                    "422": {
                        "description": "Unprocessable entity"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Seller"
                ],
                "description": "Updates seller, only parts of row.",
                "operationId": "patchSeller",
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Type of seller.",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "hobby",
                            "verified"
                        ]
                    },
                    {
                        "name": "suburb_id",
                        "in": "query",
                        "description": "Location.",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "state_id",
                        "in": "query",
                        "description": "Location.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "address",
                        "in": "query",
                        "description": "Address of the seller.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "description": "Language seller wants to use.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "find_out",
                        "in": "query",
                        "description": "How did seller found out this site.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "about",
                        "in": "query",
                        "description": "Some information about seller.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "newsletter",
                        "in": "query",
                        "description": "Does seller wants to receive newsletter",
                        "required": false,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "terms",
                        "in": "query",
                        "description": "Does seller agrees to our terms.",
                        "required": false,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "smartphone",
                        "in": "query",
                        "description": "Use smartphone for this account.",
                        "required": false,
                        "type": "integer",
                        "enum": "10"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/sellerModel"
                        }
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only seller profiles can access this resource."
                    },
                    "404": {
                        "description": "User not found."
                    },
                    "422": {
                        "description": "Unprocessable entity"
                    },
                    "500": {
                        "description": "Error internal."
                    }
                }
            }
        },
        "/seller/with": {
            "get": {
                "tags": [
                    "Seller"
                ],
                "description": "Returns list of all sellers and specified related information",
                "operationId": "getSellerWith",
                "parameters": [
                    {
                        "name": "relations",
                        "in": "query",
                        "description": "Names of relations that user wants to get information from. Relations avaliable : review,users,seller_enquiry,verification,suburb,state,dogs",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/sellerWith"
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity"
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only seller profiles can access this resource."
                    }
                }
            }
        },
        "/seller/image": {
            "post": {
                "tags": [
                    "Seller"
                ],
                "description": "Post seller avatar",
                "operationId": "postSellerImage",
                "parameters": [
                    {
                        "name": "avatar",
                        "in": "query",
                        "description": "Avatar of the seller.",
                        "required": true,
                        "type": "file"
                    }
                ],
                "responses": {
                    "422": {
                        "description": "Unprocessable entity."
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only seller profiles can access this resource."
                    }
                }
            }
        },
        "/seller/association": {
            "post": {
                "tags": [
                    "Seller"
                ],
                "description": "Accept association join request.",
                "operationId": "postSellerAssociation",
                "parameters": [
                    {
                        "name": "association_id",
                        "in": "query",
                        "description": "Id of the association that invited seller to join in.",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "422": {
                        "description": "Unprocessable entity."
                    },
                    "400": {
                        "description": "Seller is already part of association.<br>------------------------------------------<br>Invite wasn't sent to this seller."
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only seller profiles can access this resource."
                    }
                }
            }
        },
        "/seller/hobby/verification": {
            "get": {
                "tags": [
                    "Seller"
                ],
                "description": "Get verification for hobby breeder.",
                "operationId": "getSellerHobbyVerification",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/sellerHobbyVerification"
                        }
                    },
                    "400": {
                        "description": "Seller didn't send verification information."
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only seller profiles can access this resource.<br>-----------------------------------------------------------------------<br>Seller is not a hobby breeder."
                    }
                }
            },
            "post": {
                "tags": [
                    "Seller"
                ],
                "description": "Verification for hobby breeder.",
                "operationId": "postSellerHobbyVerification",
                "parameters": [
                    {
                        "name": "question1",
                        "in": "query",
                        "description": "Question1.",
                        "required": true,
                        "type": "integer",
                        "enum": "01"
                    },
                    {
                        "name": "question2",
                        "in": "query",
                        "description": "Question2.",
                        "required": true,
                        "type": "integer",
                        "enum": "01"
                    },
                    {
                        "name": "question3",
                        "in": "query",
                        "description": "Question3.",
                        "required": true,
                        "type": "integer",
                        "enum": "01"
                    },
                    {
                        "name": "question4",
                        "in": "query",
                        "description": "Question4.",
                        "required": true,
                        "type": "integer",
                        "enum": "01"
                    },
                    {
                        "name": "question5",
                        "in": "query",
                        "description": "Question5.",
                        "required": true,
                        "type": "integer",
                        "enum": "01"
                    },
                    {
                        "name": "question6",
                        "in": "query",
                        "description": "Question6.",
                        "required": true,
                        "type": "integer",
                        "enum": "01"
                    },
                    {
                        "name": "question7",
                        "in": "query",
                        "description": "Question7.",
                        "required": true,
                        "type": "integer",
                        "enum": "01"
                    },
                    {
                        "name": "question8",
                        "in": "query",
                        "description": "Question8.",
                        "required": true,
                        "type": "integer",
                        "enum": "01"
                    },
                    {
                        "name": "question9",
                        "in": "query",
                        "description": "Question9.",
                        "required": true,
                        "type": "integer",
                        "enum": "01"
                    },
                    {
                        "name": "question10",
                        "in": "query",
                        "description": "Question10.",
                        "required": true,
                        "type": "integer",
                        "enum": "01"
                    }
                ],
                "responses": {
                    "422": {
                        "description": "Unprocessable entity."
                    },
                    "400": {
                        "description": "Seller already submitted verification information.<br>------------------------------------------<br>Seller not found or does not need verification."
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only seller profiles can access this resource.<br>-----------------------------------------------------------------------<br>Seller is not a hobby breeder."
                    }
                }
            }
        },
        "/seller/verified/verification": {
            "get": {
                "tags": [
                    "Seller"
                ],
                "description": "Get verification for verified breeder.",
                "operationId": "getSellerVerifiedVerification",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/sellerVerification"
                        }
                    },
                    "400": {
                        "description": "Seller didn't send verification information."
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only seller profiles can access this resource.<br>-----------------------------------------------------------------------<br>Seller is not a hobby breeder."
                    }
                }
            },
            "post": {
                "tags": [
                    "Seller"
                ],
                "description": "Verification for verified breeder.",
                "operationId": "postSellerVerifiedVerification",
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Type of verification",
                        "required": true,
                        "type": "string",
                        "enum": "12"
                    },
                    {
                        "name": "number",
                        "in": "query",
                        "description": "Registration number",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "422": {
                        "description": "Unprocessable entity."
                    },
                    "400": {
                        "description": "Seller already submitted verification information.<br>------------------------------------------<br>Seller not found or does not need verification."
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only seller profiles can access this resource.<br>-----------------------------------------------------------------------<br>Seller is not verified breeder."
                    }
                }
            }
        },
        "/seller/verification/proof": {
            "post": {
                "tags": [
                    "Seller"
                ],
                "description": "Proof for verification",
                "operationId": "postSellerVerificationProof",
                "parameters": [
                    {
                        "name": "proof",
                        "in": "query",
                        "description": "Verification proof",
                        "required": true,
                        "type": "file"
                    }
                ],
                "responses": {
                    "422": {
                        "description": "Unprocessable entity."
                    },
                    "403": {
                        "description": "Only verified seller profiles can access this resource."
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only seller profiles can access this resource.<br>-----------------------------------------------------------------------<br>Seller is not a hobby breeder."
                    }
                }
            }
        },
        "/seller/join/association": {
            "post": {
                "tags": [
                    "Seller"
                ],
                "description": "Seller sends request to association",
                "operationId": "postSellerJoinAssociation",
                "parameters": [
                    {
                        "name": "association_id",
                        "in": "query",
                        "description": "Id association wants to join in",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "number",
                        "in": "query",
                        "description": "Number within association",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "422": {
                        "description": "Unprocessable entity."
                    },
                    "400": {
                        "description": "Seller is already in process for joining."
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only seller profiles can access this resource.<br>-----------------------------------------------------------------------<br>Seller is not a hobby breeder."
                    }
                }
            }
        },
        "/seller/dog/final": {
            "patch": {
                "tags": [
                    "Seller"
                ],
                "description": "Seller selling dog.",
                "operationId": "patchSellerDogFinal",
                "parameters": [
                    {
                        "name": "dog_id",
                        "in": "query",
                        "description": "Id of the dog seller wants to sell",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/dogID"
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity."
                    },
                    "400": {
                        "description": "Wrong dog type.<br>-----------------------------<br>Dog belongs to other seller."
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only seller profiles can access this resource.<br>-----------------------------------------------------------------------<br>Seller is not a hobby breeder."
                    }
                }
            }
        },
        "/seller/litter/final": {
            "patch": {
                "tags": [
                    "Seller"
                ],
                "description": "Seller selling dog from litter",
                "operationId": "patchSellerLitterFinal",
                "parameters": [
                    {
                        "name": "litter_id",
                        "in": "query",
                        "description": "Id of dog litter",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "sex",
                        "in": "query",
                        "description": "Sex of the dog from litter",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "male",
                            "female"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/dogID"
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity."
                    },
                    "400": {
                        "description": "Wrong dog type.<br>-----------------------------<br>Dog belongs to other seller.<br>-----------------------------<br>Dog not available."
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only seller profiles can access this resource.<br>-----------------------------------------------------------------------<br>Seller is not a hobby breeder."
                    }
                }
            }
        },
        "/seller/enquiry": {
            "post": {
                "tags": [
                    "Seller"
                ],
                "description": "Creates new enquiry for seller",
                "operationId": "postSellerEnquiry",
                "parameters": [
                    {
                        "name": "seller_id",
                        "in": "query",
                        "description": "Id of the seller.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "dog_id",
                        "in": "query",
                        "description": "Id of the dog user is interested in.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "User's name.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "Email of the user.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "contact_number",
                        "in": "query",
                        "description": "Telephone number of the user.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "enquiry",
                        "in": "query",
                        "description": "Users enquiry body.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "422": {
                        "description": "Unprocessable entity"
                    },
                    "403": {
                        "description": "Enquiry is allready sent!"
                    },
                    "400": {
                        "description": "Dog belongs to other seller."
                    }
                }
            }
        },
        "/seller/slug/{slug}": {
            "get": {
                "tags": [
                    "Seller"
                ],
                "description": "Get seller slug.",
                "operationId": "getSellerSlug",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "description": "slug",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/sellerSlug"
                        }
                    },
                    "404": {
                        "description": "Slug not found."
                    }
                }
            }
        },
        "/seller/review/request": {
            "post": {
                "tags": [
                    "SellerComments"
                ],
                "description": "Seller requests review from customers",
                "operationId": "postSellerReviewRequest",
                "parameters": [
                    {
                        "name": "email",
                        "in": "query",
                        "description": "Id of the seller.",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "422": {
                        "description": "Unprocessable entity"
                    },
                    "403": {
                        "description": "Seller doesn't have enquiries for given email.<br>----------------------------------------<br>Review already requested for given email."
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only seller profiles can access this resource."
                    }
                }
            }
        },
        "/seller/review": {
            "post": {
                "tags": [
                    "SellerComments"
                ],
                "description": "Customer writes review for seller",
                "operationId": "postSellerReview",
                "parameters": [
                    {
                        "name": "review_token",
                        "in": "query",
                        "description": "Token for writting review.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "rating1",
                        "in": "query",
                        "description": "Rating1",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "rating2",
                        "in": "query",
                        "description": "Rating2",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "rating3",
                        "in": "query",
                        "description": "Rating3",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "rating4",
                        "in": "query",
                        "description": "Rating4",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "rating5",
                        "in": "query",
                        "description": "Rating5",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Name of the customer",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "suburb_id",
                        "in": "query",
                        "description": "Suburb id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "state_id",
                        "in": "query",
                        "description": "State id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "about",
                        "in": "query",
                        "description": "Customer comments",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "contact_number",
                        "in": "query",
                        "description": "Number",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "422": {
                        "description": "Unprocessable entity"
                    }
                }
            }
        },
        "/seller/review/token/validate": {
            "post": {
                "tags": [
                    "SellerComments"
                ],
                "description": "Validates review token",
                "operationId": "postSellerReviewTokenValidate",
                "parameters": [
                    {
                        "name": "review_token",
                        "in": "query",
                        "description": "Token for writting review.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Token does not exists.<br>------------------------------<br>Review is already written."
                    },
                    "422": {
                        "description": "Unprocessable entity"
                    }
                }
            }
        },
        "/shelter/slug/{slug}": {
            "get": {
                "tags": [
                    "Shelter"
                ],
                "description": "Returns shelter and specified related information based on slug",
                "operationId": "getShelterSlug",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "description": "Shelter slug",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/shelterSlug"
                        }
                    },
                    "404": {
                        "description": "Slug not found."
                    }
                }
            }
        },
        "/shelter/enquiry": {
            "post": {
                "tags": [
                    "Shelter"
                ],
                "description": "Creates new shelter enquiry",
                "operationId": "postShelterEnquiry",
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Name of user",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "Email of user",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "enquiry",
                        "in": "query",
                        "description": "Enquiry",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "403": {
                        "description": "You have exceeded your rate limit."
                    },
                    "422": {
                        "description": "Unprocessable entity"
                    }
                }
            }
        },
        "/shelter/dog/enquiry": {
            "post": {
                "tags": [
                    "Shelter"
                ],
                "description": "Creates new dog enquiry for shelter",
                "operationId": "postShelterDogEnquiry",
                "parameters": [
                    {
                        "name": "shelter_id",
                        "in": "query",
                        "description": "Id of shelter",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "dog_id",
                        "in": "query",
                        "description": "Id of dog",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "Email",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "contact_number",
                        "in": "query",
                        "description": "Contact number",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "enquiry",
                        "in": "query",
                        "description": "Enquiry",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "403": {
                        "description": "Enquiry is allready sent!"
                    },
                    "400": {
                        "description": "Dog belongs to other shelter."
                    },
                    "422": {
                        "description": "Unprocessable entity"
                    }
                }
            }
        },
        "/shelter": {
            "put": {
                "tags": [
                    "Shelter"
                ],
                "description": "Edits whole shelter resource",
                "operationId": "putShelter",
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Name of shelter",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "web_address",
                        "in": "query",
                        "description": "Web address of shelter",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "address",
                        "in": "query",
                        "description": "Address of shelter",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "suburb_id",
                        "in": "query",
                        "description": "Location.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "state_id",
                        "in": "query",
                        "description": "Location.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "facebook",
                        "in": "query",
                        "description": "Facebook of the shelter.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "twitter",
                        "in": "query",
                        "description": "Twitter of the shelter.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "instagram",
                        "in": "query",
                        "description": "Instagram of the shelter",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "about",
                        "in": "query",
                        "description": "Some information about shelter.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "newsletter",
                        "in": "query",
                        "description": "Does seller wants to receive newsletter",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    }
                ],
                "responses": {
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only shelter profiles can access this resource."
                    },
                    "404": {
                        "description": "Shelter not found."
                    },
                    "422": {
                        "description": "Unprocessable entity"
                    }
                }
            },
            "post": {
                "tags": [
                    "Shelter"
                ],
                "description": "Creates new shelter",
                "operationId": "postShelter",
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Name of shelter",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "web_address",
                        "in": "query",
                        "description": "Web address of shelter",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "address",
                        "in": "query",
                        "description": "Address of shelter",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "suburb_id",
                        "in": "query",
                        "description": "Location.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "state_id",
                        "in": "query",
                        "description": "Location.",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "facebook",
                        "in": "query",
                        "description": "Facebook of the shelter.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "twitter",
                        "in": "query",
                        "description": "Twitter of the shelter.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "instagram",
                        "in": "query",
                        "description": "Instagram of the shelter",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "about",
                        "in": "query",
                        "description": "Some information about shelter.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "newsletter",
                        "in": "query",
                        "description": "Does seller wants to receive newsletter",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    },
                    {
                        "name": "terms",
                        "in": "query",
                        "description": "Does seller agrees to our terms.",
                        "required": true,
                        "type": "integer",
                        "enum": "10"
                    }
                ],
                "responses": {
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired"
                    },
                    "403": {
                        "description": "Shelter with that id already exists."
                    },
                    "422": {
                        "description": "Unprocessable entity"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Shelter"
                ],
                "description": "Edits partial shelter resource",
                "operationId": "patchShelter",
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Name of shelter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "web_address",
                        "in": "query",
                        "description": "Web address of shelter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "address",
                        "in": "query",
                        "description": "Address of shelter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "suburb_id",
                        "in": "query",
                        "description": "Location.",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "state_id",
                        "in": "query",
                        "description": "Location.",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "facebook",
                        "in": "query",
                        "description": "Facebook of the shelter.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "twitter",
                        "in": "query",
                        "description": "Twitter of the shelter.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "instagram",
                        "in": "query",
                        "description": "Instagram of the shelter",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "about",
                        "in": "query",
                        "description": "Some information about shelter.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "newsletter",
                        "in": "query",
                        "description": "Does seller wants to receive newsletter",
                        "required": false,
                        "type": "integer",
                        "enum": "10"
                    }
                ],
                "responses": {
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only shelter profiles can access this resource."
                    },
                    "404": {
                        "description": "Shelter not found."
                    },
                    "422": {
                        "description": "Unprocessable entity"
                    }
                }
            }
        },
        "/shelter/with": {
            "get": {
                "tags": [
                    "Shelter"
                ],
                "description": "Returns shelter and specified related information",
                "operationId": "getShelterWith",
                "parameters": [
                    {
                        "name": "relations",
                        "in": "query",
                        "description": "Names of relations that user wants to get information from. Relations avaliable : key_members,suburb,state,user,review,dogs,shelter_enquiry",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/shelterWith"
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity"
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only shelter profiles can access this resource."
                    }
                }
            }
        },
        "/shelter/images": {
            "post": {
                "tags": [
                    "Shelter"
                ],
                "description": "Post shelter avatar",
                "operationId": "postShelterImages",
                "parameters": [
                    {
                        "name": "avatar",
                        "in": "query",
                        "description": "Avatar of the shelter.",
                        "required": true,
                        "type": "file"
                    },
                    {
                        "name": "advert_photo",
                        "in": "query",
                        "description": "Advert photo of the shelter.",
                        "required": true,
                        "type": "file"
                    },
                    {
                        "name": "images[]",
                        "in": "query",
                        "description": "Images of the shelter",
                        "required": true,
                        "type": "array",
                        "items": "file"
                    }
                ],
                "responses": {
                    "422": {
                        "description": "Unprocessable entity."
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only seller profiles can access this resource."
                    }
                }
            }
        },
        "/shelter/keymembers": {
            "post": {
                "tags": [
                    "Shelter"
                ],
                "description": "Post shelter keymembers.",
                "operationId": "postShelterKeymembers",
                "parameters": [
                    {
                        "name": "type[]",
                        "in": "query",
                        "description": "Type of key member.",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name[]",
                        "in": "query",
                        "description": "Name of key member.",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email[]",
                        "in": "query",
                        "description": "Email of keymember.",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Not all data is provided."
                    },
                    "422": {
                        "description": "Unprocessable Entity."
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired.<br>-----------------------------------------------------------------------<br>The token has been blacklisted<br>-----------------------------------------------------------------------Unable to authenticate with invalid token.<br>------------------------------------<br>Only shelter profiles can access this resource."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Shelter"
                ],
                "description": "Delete shelter keymembers.",
                "operationId": "deleteShelterKeymembers",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Id of key member.",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "422": {
                        "description": "Unprocessable Entity."
                    },
                    "400": {
                        "description": "Keymember belongs to other shelter"
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired.<br>-----------------------------------------------------------------------<br>The token has been blacklisted<br>-----------------------------------------------------------------------Unable to authenticate with invalid token.<br>------------------------------------<br>Only shelter profiles can access this resource."
                    }
                }
            }
        },
        "/shelter/review/request": {
            "post": {
                "tags": [
                    "ShelterComments"
                ],
                "description": "Shelter requests review from customers",
                "operationId": "postShelterReviewRequest",
                "parameters": [
                    {
                        "name": "email",
                        "in": "query",
                        "description": "Email of customer",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "422": {
                        "description": "Unprocessable entity"
                    },
                    "403": {
                        "description": "Shelter doesn't have enquiries for given email.<br>----------------------------------------<br>Review already requested for given email."
                    },
                    "401": {
                        "description": "Failed to authenticate because of bad credentials or an invalid authorization header.<br>-----------------------------------------------------------------------<br>Wrong number of segments.<br>-----------------------------------------------------------------------<br>Token Signature could not be verified.<br>-----------------------------------------------------------------------<br>Could not decode token. The token is an invalid JWS.<br>-----------------------------------------------------------------------<br>Token has expired<br>-----------------------------------------------------------------------<br>Only shelter profiles can access this resource."
                    }
                }
            }
        },
        "/shelter/review": {
            "post": {
                "tags": [
                    "ShelterComments"
                ],
                "description": "Customer writes review for shelter",
                "operationId": "postShelterReview",
                "parameters": [
                    {
                        "name": "shelter_review_token",
                        "in": "query",
                        "description": "Token for writting review.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "rating1",
                        "in": "query",
                        "description": "Rating1",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "rating2",
                        "in": "query",
                        "description": "Rating2",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "rating3",
                        "in": "query",
                        "description": "Rating3",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "rating4",
                        "in": "query",
                        "description": "Rating4",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "rating5",
                        "in": "query",
                        "description": "Rating5",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Name of the customer",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "suburb_id",
                        "in": "query",
                        "description": "Suburb id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "state_id",
                        "in": "query",
                        "description": "State id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "about",
                        "in": "query",
                        "description": "Customer comments",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "contact_number",
                        "in": "query",
                        "description": "Number",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "422": {
                        "description": "Unprocessable entity"
                    }
                }
            }
        },
        "/shelter/review/token/validate": {
            "post": {
                "tags": [
                    "ShelterComments"
                ],
                "description": "Validates review token",
                "operationId": "postShelterReviewTokenValidate",
                "parameters": [
                    {
                        "name": "review_token",
                        "in": "query",
                        "description": "Token for writting review.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Token does not exists.<br>------------------------------<br>Review is already written."
                    },
                    "422": {
                        "description": "Unprocessable entity"
                    }
                }
            }
        }
    },
    "definitions": {
        "editAssociation": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "suburb_id": {
                    "type": "integer"
                },
                "state_id": {
                    "type": "integer"
                },
                "avatar": {
                    "type": "string"
                },
                "breed": {
                    "type": "integer"
                },
                "about": {
                    "type": "string"
                },
                "banner_image": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            }
        },
        "slugAssociation": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "suburb": {
                    "description": "SuburbModel",
                    "$ref": "#/definitions/suburb"
                },
                "state": {
                    "description": "StateModel",
                    "$ref": "#/definitions/state"
                },
                "avatar": {
                    "type": "string"
                },
                "breed": {
                    "description": "DogBreedModel",
                    "$ref": "#/definitions/dogBreed"
                },
                "about": {
                    "type": "string"
                },
                "banner_image": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "members": {
                    "description": "Association members",
                    "$ref": "#/definitions/associationMembersSlug"
                }
            }
        },
        "associationMembersSlug": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "seller_id": {
                    "type": "integer"
                },
                "association_id": {
                    "type": "integer"
                },
                "user": {
                    "description": "Auth user",
                    "$ref": "#/definitions/authUserAssociation"
                }
            }
        },
        "associationWith": {
            "properties": {
                "id": {
                    "description": "Class AssociationModel",
                    "type": "integer"
                },
                "user_id": {
                    "description": "Class AssociationModel",
                    "type": "integer"
                },
                "name": {
                    "description": "Class AssociationModel",
                    "type": "string"
                },
                "avatar": {
                    "description": " Avatar",
                    "type": "string"
                },
                "about": {
                    "description": " General information of the association",
                    "type": "string"
                },
                "banner_image": {
                    "description": " Banner image",
                    "type": "string"
                },
                "slug": {
                    "description": "Slug",
                    "type": "string"
                },
                "breed": {
                    "description": "Breed relation",
                    "type": "array",
                    "items": "string"
                },
                "suburb": {
                    "description": "Suburb relation",
                    "type": "array",
                    "items": "string"
                },
                "state": {
                    "description": "State relation",
                    "type": "array",
                    "items": "string"
                },
                "members": {
                    "description": "Members relation",
                    "type": "array",
                    "items": "string"
                },
                "key_members": {
                    "description": "Key members relation",
                    "type": "array",
                    "items": "string"
                }
            }
        },
        "userRole": {
            "properties": {
                "role": {
                    "type": "string"
                }
            }
        },
        "userId": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "contact_number": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "token": {
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "newToken": {
            "properties": {
                "newToken": {
                    "type": "string"
                }
            }
        },
        "authUserAssociation": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "contact_number": {
                    "type": "string"
                },
                "role": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "seller": {
                    "description": "Seller",
                    "$ref": "#/definitions/sellerUserAssociation"
                }
            }
        },
        "jwtResponse": {},
        "User": {
            "properties": {
                "id": {
                    "description": "Class AuthModel",
                    "type": "integer"
                },
                "first_name": {
                    "description": "Class AuthModel",
                    "type": "string"
                },
                "last_name": {
                    "description": "Class AuthModel",
                    "type": "string"
                },
                "password": {
                    "description": "Class AuthModel",
                    "type": "string"
                },
                "email": {
                    "description": "Class AuthModel",
                    "type": "string"
                },
                "contact_number": {
                    "description": "Class AuthModel",
                    "type": "string"
                }
            }
        },
        "editDog": {
            "properties": {
                "id": {
                    "description": "Class AssociationModel",
                    "type": "integer"
                },
                "breed_id": {
                    "description": "Class AssociationModel",
                    "type": "integer"
                },
                "state_id": {
                    "description": "Class AssociationModel",
                    "type": "integer"
                },
                "suburb_id": {
                    "description": "Class AssociationModel",
                    "type": "integer"
                },
                "birth_date": {
                    "description": "Class AssociationModel",
                    "type": "date"
                },
                "type_of_listing": {
                    "description": "Class AssociationModel",
                    "type": "string"
                },
                "sex": {
                    "description": "Class AssociationModel",
                    "type": "string"
                },
                "male_qty": {
                    "description": "Class AssociationModel",
                    "type": "integer"
                },
                "female_qty": {
                    "description": "Class AssociationModel",
                    "type": "integer"
                },
                "cost": {
                    "description": "Class AssociationModel",
                    "type": "integer"
                },
                "about": {
                    "description": "Class AssociationModel",
                    "type": "string"
                },
                "name": {
                    "description": "Class AssociationModel",
                    "type": "string"
                },
                "mother_id": {
                    "description": "Class AssociationModel",
                    "type": "integer"
                },
                "father_id": {
                    "description": "Class AssociationModel",
                    "type": "integer"
                },
                "vaccination": {
                    "description": "Class AssociationModel",
                    "type": "boolean"
                },
                "vet_checked": {
                    "description": "Class AssociationModel",
                    "type": "boolean"
                },
                "desexed": {
                    "description": "Class AssociationModel",
                    "type": "boolean"
                },
                "de_warmed": {
                    "description": "Class AssociationModel",
                    "type": "boolean"
                },
                "micro_chipped": {
                    "description": "Class AssociationModel",
                    "type": "boolean"
                },
                "registration_papers": {
                    "description": "Class AssociationModel",
                    "type": "boolean"
                },
                "family_dog": {
                    "description": "Class AssociationModel",
                    "type": "boolean"
                },
                "indoor_dog": {
                    "description": "Class AssociationModel",
                    "type": "boolean"
                },
                "energetic": {
                    "description": "Class AssociationModel",
                    "type": "boolean"
                },
                "friendly": {
                    "description": "Class AssociationModel",
                    "type": "boolean"
                },
                "outdoor_dog": {
                    "description": "Class AssociationModel",
                    "type": "boolean"
                },
                "relaxed": {
                    "description": "Class AssociationModel",
                    "type": "boolean"
                },
                "seller_id": {
                    "description": "Class AssociationModel",
                    "type": "integer"
                },
                "listing_status": {
                    "description": "Class AssociationModel",
                    "type": "string"
                },
                "sold": {
                    "description": "Class AssociationModel",
                    "type": "boolean"
                },
                "male_sold": {
                    "description": "Class AssociationModel",
                    "type": "integer"
                },
                "female_sold": {
                    "description": "Class AssociationModel",
                    "type": "integer"
                }
            }
        },
        "dogWith": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "breed_id": {
                    "type": "integer"
                },
                "state_id": {
                    "type": "integer"
                },
                "suburb_id": {
                    "type": "integer"
                },
                "birth_date": {
                    "type": "date"
                },
                "type_of_listing": {
                    "type": "string"
                },
                "sex": {
                    "type": "string"
                },
                "male_qty": {
                    "type": "integer"
                },
                "female_qty": {
                    "type": "integer"
                },
                "cost": {
                    "type": "integer"
                },
                "about": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "mother_id": {
                    "type": "integer"
                },
                "father_id": {
                    "type": "integer"
                },
                "vaccination": {
                    "type": "boolean"
                },
                "vet_checked": {
                    "type": "boolean"
                },
                "desexed": {
                    "type": "boolean"
                },
                "de_warmed": {
                    "type": "boolean"
                },
                "micro_chipped": {
                    "type": "boolean"
                },
                "registration_papers": {
                    "type": "boolean"
                },
                "family_dog": {
                    "type": "boolean"
                },
                "indoor_dog": {
                    "type": "boolean"
                },
                "energetic": {
                    "type": "boolean"
                },
                "friendly": {
                    "type": "boolean"
                },
                "outdoor_dog": {
                    "type": "boolean"
                },
                "relaxed": {
                    "type": "boolean"
                },
                "seller_id": {
                    "type": "integer"
                },
                "listing_status": {
                    "type": "string"
                },
                "sold": {
                    "type": "boolean"
                },
                "male_sold": {
                    "type": "integer"
                },
                "female_sold": {
                    "type": "integer"
                },
                "owner": {
                    "description": "Dog breed information",
                    "$ref": "#/definitions/sellerWith"
                },
                "breed": {
                    "description": "Dog breed information",
                    "$ref": "#/definitions/dogBreed"
                },
                "mother": {
                    "description": "Dog mother information",
                    "$ref": "#/definitions/dogParents"
                },
                "father": {
                    "description": "Dog father information",
                    "$ref": "#/definitions/dogParents"
                },
                "shelter": {
                    "description": "Dog father information",
                    "$ref": "#/definitions/shelterWith"
                }
            }
        },
        "dogParents": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "birth_date": {
                    "type": "date"
                },
                "image": {
                    "type": "string"
                },
                "temperament": {
                    "type": "boolean"
                },
                "energy": {
                    "type": "boolean"
                },
                "intelligence": {
                    "type": "boolean"
                },
                "maintenance": {
                    "type": "boolean"
                },
                "seller_id": {
                    "type": "integer"
                },
                "profile_uri": {
                    "type": "string"
                },
                "breed": {
                    "description": "Dog breed information",
                    "$ref": "#/definitions/dogBreed"
                }
            }
        },
        "dogMotherId": {
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "dogFatherId": {
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "dogParentData": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "breed_id": {
                    "type": "integer"
                },
                "birth_date": {
                    "type": "date"
                },
                "image": {
                    "type": "string"
                },
                "temperament": {
                    "type": "integer"
                },
                "energy": {
                    "type": "integer"
                },
                "intelligence": {
                    "type": "integer"
                },
                "maintenance": {
                    "type": "integer"
                },
                "seller_id": {
                    "type": "integer"
                },
                "profile_url": {
                    "type": "string"
                },
                "breed": {
                    "description": "Dog breed information",
                    "$ref": "#/definitions/dogBreed"
                }
            }
        },
        "suburb": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "state_id": {
                    "type": "integer"
                },
                "suburb": {
                    "type": "string"
                },
                "postcode": {
                    "type": "integer"
                }
            }
        },
        "state": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "abbreviation": {
                    "type": "string"
                }
            }
        },
        "dogBreed": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "breed": {
                    "type": "string"
                }
            }
        },
        "locationSuburb": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "state_id": {
                    "type": "integer"
                },
                "suburb": {
                    "type": "string"
                },
                "postcode": {
                    "type": "integer"
                }
            }
        },
        "locationState": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "abbreviation": {
                    "type": "string"
                }
            }
        },
        "sellerModel": {
            "properties": {
                "id": {
                    "description": "Class SellerModel",
                    "type": "integer"
                },
                "user": {
                    "description": "Class AuthModel",
                    "$ref": "#/definitions/User"
                },
                "type": {
                    "description": "Class SellerModel",
                    "type": "enum",
                    "default": "seller",
                    "enum": [
                        "seller",
                        "rbreeder",
                        "hbreeder",
                        "rescue"
                    ]
                },
                "verified": {
                    "description": " true or false",
                    "type": "boolean"
                },
                "suspicious": {
                    "description": " true or false",
                    "type": "boolean"
                }
            }
        },
        "emails": {
            "required": [
                "email"
            ]
        },
        "review": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                },
                "rating1": {
                    "type": "integer"
                },
                "rating2": {
                    "type": "integer"
                },
                "rating3": {
                    "type": "integer"
                },
                "rating4": {
                    "type": "integer"
                },
                "rating5": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "about": {
                    "type": "string"
                },
                "contact_number": {
                    "type": "string"
                },
                "approved": {
                    "type": "integer"
                },
                "suburb": {
                    "description": "Suburb information",
                    "$ref": "#/definitions/suburb"
                },
                "state": {
                    "description": "State information",
                    "$ref": "#/definitions/state"
                }
            }
        },
        "shelterWith": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "web_address": {
                    "description": " Web address of shelter",
                    "type": "string"
                },
                "address": {
                    "description": "Address of shelter",
                    "type": "string"
                },
                "suburb_id": {
                    "type": "integer"
                },
                "state_id": {
                    "type": "integer"
                },
                "facebook": {
                    "description": " Facebook of shelter",
                    "type": "string"
                },
                "twitter": {
                    "description": " Twitter of shelter",
                    "type": "string"
                },
                "instagram": {
                    "description": "Instagram of shelter",
                    "type": "string"
                },
                "about": {
                    "description": "About shelter",
                    "type": "string"
                },
                "avatar": {
                    "description": "Avatar of shelter",
                    "type": "string"
                },
                "advert_photo": {
                    "description": "Add photo",
                    "type": "string"
                },
                "slug": {
                    "description": "Slug",
                    "type": "string"
                },
                "newsletter": {
                    "description": "Newsletter",
                    "type": "boolean"
                },
                "terms": {
                    "description": "Terms",
                    "type": "boolean"
                },
                "users": {
                    "description": "Users relation",
                    "type": "array",
                    "items": "string"
                },
                "suburb": {
                    "description": "Suburb relation",
                    "type": "array",
                    "items": "string"
                },
                "state": {
                    "description": "State relation",
                    "type": "array",
                    "items": "string"
                },
                "key_members": {
                    "description": "Key members relation",
                    "type": "array",
                    "items": "string"
                },
                "shelter_enquiry": {
                    "description": "Shelter enquiry relation",
                    "type": "array",
                    "items": "string"
                },
                "dogs": {
                    "description": "Dogs relation",
                    "type": "array",
                    "items": "string"
                },
                "review": {
                    "description": "Review relation",
                    "type": "array",
                    "items": "string"
                }
            }
        },
        "shelterSlug": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "web_address": {
                    "description": " Web address of shelter",
                    "type": "string"
                },
                "address": {
                    "description": "Address of shelter",
                    "type": "string"
                },
                "suburb_id": {
                    "type": "integer"
                },
                "state_id": {
                    "type": "integer"
                },
                "facebook": {
                    "description": " Facebook of shelter",
                    "type": "string"
                },
                "twitter": {
                    "description": " Twitter of shelter",
                    "type": "string"
                },
                "instagram": {
                    "description": "Instagram of shelter",
                    "type": "string"
                },
                "about": {
                    "description": "About shelter",
                    "type": "string"
                },
                "avatar": {
                    "description": "Avatar of shelter",
                    "type": "string"
                },
                "advert_photo": {
                    "description": "Add photo",
                    "type": "string"
                },
                "slug": {
                    "description": "Slug",
                    "type": "string"
                },
                "newsletter": {
                    "description": "Newsletter",
                    "type": "boolean"
                },
                "terms": {
                    "description": "Terms",
                    "type": "boolean"
                },
                "users": {
                    "description": "User information",
                    "$ref": "#/definitions/userId"
                },
                "suburb": {
                    "description": "Suburb information",
                    "$ref": "#/definitions/suburb"
                },
                "state": {
                    "description": "State information",
                    "$ref": "#/definitions/state"
                },
                "key_members": {
                    "description": "Key members of shelter",
                    "$ref": "#/definitions/shelterKeyMembers"
                },
                "shelter_enquiry": {
                    "description": "Seller hobby verification information",
                    "$ref": "#/definitions/shelterEnquiry"
                },
                "dogs": {
                    "description": "Dog information",
                    "$ref": "#/definitions/editDog"
                },
                "review": {
                    "description": "Review information",
                    "$ref": "#/definitions/shelterReview"
                }
            }
        },
        "shelterKeyMembers": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "shelter_id": {
                    "type": "string"
                },
                "type": {
                    "description": " Type of key member",
                    "type": "string"
                },
                "name": {
                    "description": "Name of keymember",
                    "type": "string"
                },
                "email": {
                    "description": "Email of keymember",
                    "type": "string"
                },
                "user_id": {
                    "description": "Id for referencing",
                    "type": "string"
                }
            }
        },
        "shelterEnquiry": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "description": "Name of keymember",
                    "type": "string"
                },
                "email": {
                    "description": "Email of keymember",
                    "type": "string"
                },
                "enquiry": {
                    "description": "Shelter enquiry",
                    "type": "string"
                }
            }
        },
        "shelterReview": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "shelter_id": {
                    "type": "string"
                },
                "rating1": {
                    "type": "integer"
                },
                "rating2": {
                    "type": "integer"
                },
                "rating3": {
                    "type": "integer"
                },
                "rating4": {
                    "type": "integer"
                },
                "rating5": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "about": {
                    "type": "string"
                },
                "contact_number": {
                    "type": "string"
                },
                "approved": {
                    "type": "boolean"
                },
                "suburb": {
                    "description": "Suburb information",
                    "$ref": "#/definitions/suburb"
                },
                "state": {
                    "description": "State information",
                    "$ref": "#/definitions/state"
                }
            }
        }
    },
    "externalDocs": {
        "description": "Find out more about my website",
        "url": "http..."
    }
}